<!-- Diagrams Tab -->
<div
  x-show="activeTab === 'diagrams'"
  class="h-full"
  x-init="$nextTick(() => { if (activeTab === 'diagrams' && !diagramContent && !loading) { setTimeout(() => loadDiagram(), 250); } })"
  x-data="{
    viewMode: 'preview',
    toggleViewMode() {
      this.viewMode = this.viewMode === 'preview' ? 'code' : 'preview';
    },
    copyToClipboard(elementId) {
      const element = document.getElementById(elementId);
      if (!element) return;

      const text = element.textContent;
      navigator.clipboard.writeText(text)
        .then(() => {
          const notification = document.createElement('div');
          notification.textContent = 'Copied to clipboard!';
          notification.className = 'fixed top-4 right-4 bg-green-600 text-white px-4 py-2 rounded shadow-lg z-50';
          document.body.appendChild(notification);
          setTimeout(() => notification.remove(), 2000);
        })
        .catch(err => console.error('Failed to copy:', err));
    }
  }"
>
  <!-- Add responsive diagram styles -->
  <style>
    .mermaid-responsive-container {
      width: 100% !important;
      height: 100% !important;
      position: relative;
      overflow: hidden;
    }

    .mermaid-responsive-container svg {
      width: 100% !important;
      height: 100% !important;
      max-width: none !important;
      max-height: none !important;
      object-fit: contain;
    }

    .mermaid-responsive-wrapper {
      width: 100%;
      height: 100%;
      display: flex;
      justify-content: center;
      align-items: center;
      overflow: hidden;
    }
  </style>

  <!-- Diagram Container with full-height layout -->
  <div class="flex flex-col h-full" style="<%= diagram_container_css_variables %>">
    <!-- Diagram Controls -->
    <div class="p-4 border-b border-gray-200 bg-gray-50">
      <div class="flex flex-wrap items-center gap-2">
        <div class="flex items-center gap-2">
          <select
            x-model="selectedDiagramType"
            @change="loadDiagram()"
            class="compact-select"
          >
            <option value="database_tables">Database Tables</option>
            <option value="model_associations">Model Associations</option>
            <option value="foreign_keys">Foreign Keys</option>
          </select>

          <button
            @click="loadDiagram(true)"
            class="compact-button bg-blue-600 text-white hover:bg-blue-700"
          >
            Generate Diagram
          </button>
        </div>

        <!-- Right-aligned controls -->
        <div class="flex items-center gap-2 ml-auto">
          <button
            x-show="diagramContent && viewMode === 'preview'"
            @click="resetView()"
            class="compact-button bg-gray-600 text-white hover:bg-gray-700"
          >
            Reset View
          </button>
        </div>
      </div>
    </div>

    <!-- Diagram Content Area -->
    <div class="flex-1 overflow-hidden relative">
      <!-- Empty State -->
      <div
        x-show="!diagramContent && !loading"
        class="absolute inset-0 flex flex-col items-center justify-center text-gray-500"
      >
        <svg class="w-12 h-12 mb-2 text-gray-400" fill="none" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1"
                d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"/>
        </svg>
        <p class="text-sm">Select a diagram type and click Generate</p>
      </div>

      <!-- Loading State -->
      <div
        x-show="loading"
        class="absolute inset-0 flex flex-col items-center justify-center"
      >
        <div class="animate-pulse flex flex-col items-center">
          <div class="w-12 h-12 bg-blue-100 rounded-full mb-2 flex items-center justify-center">
            <svg class="w-6 h-6 text-blue-600 animate-spin" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
          </div>
          <div class="text-sm text-gray-500">Generating diagram...</div>
        </div>
      </div>

      <!-- Rendered Diagram -->
      <div
        id="diagram-container"
        x-show="diagramContent && !loading"
        class="absolute inset-0 p-4 overflow-hidden"
      >
        <!-- Mermaid diagram will be rendered here -->
      </div>

      <!-- Error State -->
      <div
        x-show="diagramError"
        class="absolute inset-0 flex items-center justify-center"
      >
        <div class="p-4 text-red-600 bg-red-50 border border-red-200 rounded m-4 max-w-lg">
          <p class="font-medium mb-2">Error rendering diagram</p>
          <p class="text-sm mb-2" x-text="diagramError"></p>
          <div class="flex gap-2">
            <button @click="diagramError = null; loadDiagram(true)" class="compact-button bg-red-600 text-white hover:bg-red-700">
              Try Again
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
function diagramsView() {
  return {
    selectedDiagramType: 'database_tables',
    diagramContent: null,
    diagramError: null,
    loading: false,
    viewMode: 'preview',

    init() {
      // Auto-load diagram on page load
      setTimeout(() => this.loadDiagram(), 500);
    },

    async loadDiagram(refresh = false) {
      if (this.loading) return;

      this.loading = true;
      this.diagramError = null;

      try {
        const refreshParam = refresh ? '&refresh=true' : '';
        const response = await fetch(`/dbwatcher/api/v1/sessions/<%= params[:id] %>/diagrams?diagram_type=${this.selectedDiagramType}${refreshParam}`);

        if (!response.ok) {
          throw new Error(`Server error: ${response.status}`);
        }

        const data = await response.json();

        if (data.error) {
          throw new Error(data.error);
        }

        this.diagramContent = data.content;
        await this.renderMermaid();
      } catch (error) {
        console.error('Failed to load diagram:', error);
        this.diagramError = error.message || 'Failed to load diagram';
      } finally {
        this.loading = false;
      }
    },

    async renderMermaid() {
      if (!this.diagramContent) return;

      const container = document.getElementById('diagram-container');
      if (!container) return;

      try {
        if (window.MermaidService) {
          await window.MermaidService.render(this.diagramContent, container);
        } else {
          throw new Error('MermaidService not available');
        }
      } catch (error) {
        console.error('Mermaid rendering error:', error);
        this.diagramError = error.message || 'Could not render diagram';
      }
    },

    resetView() {
      if (window.MermaidService) {
        window.MermaidService.resetView();
      }
    }
  };
}
</script>
