name: "Notify Status"
description: "Send notifications to Slack and GitHub with consistent formatting"
inputs:
  context:
    description: "Notification context (ci, release, auto-merge)"
    required: true
  status:
    description: "Overall status (success, failure, partial)"
    required: true
  slack-channel:
    description: "Slack channel for notification"
    required: false
  slack-token:
    description: "Slack bot token (actual token, not secret name)"
    required: false
  pr-number:
    description: "Pull request number for GitHub notifications"
    required: false
  github-token:
    description: "GitHub token for PR comments"
    required: false
  test-result:
    description: "Test job result"
    required: false
  security-result:
    description: "Security job result"
    required: false
  quality-result:
    description: "Quality job result"
    required: false
  compatibility-result:
    description: "Compatibility job result"
    required: false
  details-url:
    description: "URL to workflow run details"
    required: false
    default: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

runs:
  using: "composite"
  steps:
    - name: Determine notification details
      id: details
      shell: bash
      run: |
        STATUS="${{ inputs.status }}"
        CONTEXT="${{ inputs.context }}"

        # Set emoji and color based on status
        case "$STATUS" in
          "success")
            echo "emoji=‚úÖ" >> $GITHUB_OUTPUT
            echo "color=good" >> $GITHUB_OUTPUT
            ;;
          "failure")
            echo "emoji=‚ùå" >> $GITHUB_OUTPUT
            echo "color=danger" >> $GITHUB_OUTPUT
            ;;
          "partial")
            echo "emoji=‚ö†Ô∏è" >> $GITHUB_OUTPUT
            echo "color=warning" >> $GITHUB_OUTPUT
            ;;
          *)
            echo "emoji=‚ÑπÔ∏è" >> $GITHUB_OUTPUT
            echo "color=good" >> $GITHUB_OUTPUT
            ;;
        esac

        # Set context-specific titles
        case "$CONTEXT" in
          "ci")
            echo "title=CI Status" >> $GITHUB_OUTPUT
            ;;
          "release")
            echo "title=Release Status" >> $GITHUB_OUTPUT
            ;;
          "auto-merge")
            echo "title=Auto-merge Status" >> $GITHUB_OUTPUT
            ;;
          *)
            echo "title=Status Update" >> $GITHUB_OUTPUT
            ;;
        esac

    - name: Build status summary
      id: summary
      shell: bash
      run: |
        # Build check summary
        CHECKS=""

        if [ -n "${{ inputs.test-result }}" ]; then
          if [ "${{ inputs.test-result }}" == "success" ]; then
            CHECKS+="‚úÖ Tests passed"$'\n'
          else
            CHECKS+="‚ùå Tests failed"$'\n'
          fi
        fi

        if [ -n "${{ inputs.quality-result }}" ]; then
          if [ "${{ inputs.quality-result }}" == "success" ]; then
            CHECKS+="‚úÖ Code quality passed"$'\n'
          else
            CHECKS+="‚ùå Code quality issues"$'\n'
          fi
        fi

        if [ -n "${{ inputs.security-result }}" ]; then
          if [ "${{ inputs.security-result }}" == "success" ]; then
            CHECKS+="‚úÖ Security scan passed"$'\n'
          else
            CHECKS+="‚ùå Security scan failed"$'\n'
          fi
        fi

        if [ -n "${{ inputs.compatibility-result }}" ]; then
          if [ "${{ inputs.compatibility-result }}" == "success" ]; then
            CHECKS+="‚úÖ Compatibility passed"$'\n'
          else
            CHECKS+="‚ùå Compatibility issues"$'\n'
          fi
        fi

        # Remove trailing newline and store
        CHECKS=$(echo "$CHECKS" | sed '$ s/$//')
        echo "checks<<EOF" >> $GITHUB_OUTPUT
        echo "$CHECKS" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Notify GitHub PR
      if: inputs.pr-number != '' && inputs.github-token != ''
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      run: |
        PR_NUMBER="${{ inputs.pr-number }}"
        STATUS="${{ steps.details.outputs.emoji }} **${{ steps.details.outputs.title }}: ${{ inputs.status }}**"

        # Create PR comment
        cat > pr_report.md << EOF
        ## üîç ${{ steps.details.outputs.title }}

        $STATUS

        ${{ steps.summary.outputs.checks }}

        **[View Details ‚Üí](${{ inputs.details-url }})**
        EOF

        # Post comment using GitHub CLI
        if command -v gh >/dev/null 2>&1; then
          gh pr comment "$PR_NUMBER" --body-file pr_report.md
          echo "‚úÖ GitHub PR notification sent"
        else
          echo "‚ö†Ô∏è GitHub CLI not available, skipping PR comment"
        fi

    - name: Notify Slack
      if: inputs.slack-channel != '' && inputs.slack-token != ''
      uses: slackapi/slack-github-action@v2.1.1
      with:
        token: ${{ inputs.slack-token }}
        method: chat.postMessage
        payload: |
          {
            "channel": "${{ inputs.slack-channel }}",
            "text": "${{ steps.details.outputs.emoji }} ${{ steps.details.outputs.title }} ${{ inputs.status }} - ${{ github.ref_name }}",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "${{ steps.details.outputs.emoji }} *${{ steps.details.outputs.title }} ${{ inputs.status }}* on `${{ github.ref_name }}`"
                },
                "accessory": {
                  "type": "button",
                  "text": {
                    "type": "plain_text",
                    "text": "View Run"
                  },
                  "url": "${{ inputs.details-url }}"
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Tests*\n${{ inputs.test-result == 'success' && '‚úÖ Passed' || (inputs.test-result == 'failure' && '‚ùå Failed' || '‚ÑπÔ∏è N/A') }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Quality*\n${{ inputs.quality-result == 'success' && '‚úÖ Passed' || (inputs.quality-result == 'failure' && '‚ùå Failed' || '‚ÑπÔ∏è N/A') }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Security*\n${{ inputs.security-result == 'success' && '‚úÖ Passed' || (inputs.security-result == 'failure' && '‚ùå Failed' || '‚ÑπÔ∏è N/A') }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Compatibility*\n${{ inputs.compatibility-result == 'success' && '‚úÖ Passed' || (inputs.compatibility-result == 'failure' && '‚ùå Failed' || '‚ÑπÔ∏è N/A') }}"
                  }
                ]
              },
              {
                "type": "context",
                "elements": [
                  {
                    "type": "mrkdwn",
                    "text": "Triggered by ${{ github.actor }} ‚Ä¢ <https://github.com/${{ github.repository }}|${{ github.repository }}>"
                  }
                ]
              }
            ]
          }
