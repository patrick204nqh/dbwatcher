name: 'Setup Configuration'
description: 'Load and parse central configuration from .github/config.yml'
inputs:
  config-path:
    description: 'Path to config file'
    required: false
    default: '.github/config.yml'
outputs:
  # Ruby configuration
  ruby-versions:
    description: 'Available Ruby versions as JSON array'
    value: ${{ steps.parse.outputs.ruby-versions }}
  ruby-default:
    description: 'Default Ruby version'
    value: ${{ steps.parse.outputs.ruby-default }}
  
  # Timeouts
  timeout-test:
    description: 'Test timeout in seconds'
    value: ${{ steps.parse.outputs.timeout-test }}
  timeout-security:
    description: 'Security scan timeout in seconds'
    value: ${{ steps.parse.outputs.timeout-security }}
  timeout-quality:
    description: 'Quality check timeout in seconds'
    value: ${{ steps.parse.outputs.timeout-quality }}
  timeout-compatibility:
    description: 'Compatibility check timeout in seconds'
    value: ${{ steps.parse.outputs.timeout-compatibility }}
  
  # Thresholds
  coverage-threshold:
    description: 'Coverage percentage threshold'
    value: ${{ steps.parse.outputs.coverage-threshold }}
    
  # Notifications
  slack-channel-ci:
    description: 'Slack channel for CI notifications'
    value: ${{ steps.parse.outputs.slack-channel-ci }}
  slack-channel-releases:
    description: 'Slack channel for release notifications'
    value: ${{ steps.parse.outputs.slack-channel-releases }}
  slack-bot-token-secret:
    description: 'Secret name for Slack bot token'
    value: ${{ steps.parse.outputs.slack-bot-token-secret }}
  github-app-id-secret:
    description: 'Secret name for GitHub app ID'
    value: ${{ steps.parse.outputs.github-app-id-secret }}
  github-private-key-secret:
    description: 'Secret name for GitHub private key'
    value: ${{ steps.parse.outputs.github-private-key-secret }}
    
  # Features
  feature-coverage-upload:
    description: 'Whether to upload coverage reports'
    value: ${{ steps.parse.outputs.feature-coverage-upload }}
  feature-security-scan:
    description: 'Whether to run security scans'
    value: ${{ steps.parse.outputs.feature-security-scan }}
  feature-quality-check:
    description: 'Whether to run quality checks'
    value: ${{ steps.parse.outputs.feature-quality-check }}
  feature-slack-notifications:
    description: 'Whether to send Slack notifications'
    value: ${{ steps.parse.outputs.feature-slack-notifications }}

runs:
  using: 'composite'
  steps:
    - name: Parse configuration
      id: parse
      shell: bash
      run: |
        CONFIG_FILE="${{ inputs.config-path }}"
        
        if [ ! -f "$CONFIG_FILE" ]; then
          echo "❌ Configuration file not found: $CONFIG_FILE"
          exit 1
        fi
        
        # Parse YAML using yq (if available) or Python
        if command -v yq >/dev/null 2>&1; then
          # Ruby configuration
          echo "ruby-versions=$(yq eval '.ruby.versions' "$CONFIG_FILE")" >> $GITHUB_OUTPUT
          echo "ruby-default=$(yq eval '.ruby.default' "$CONFIG_FILE")" >> $GITHUB_OUTPUT
          
          # Timeouts
          echo "timeout-test=$(yq eval '.timeouts.test' "$CONFIG_FILE")" >> $GITHUB_OUTPUT
          echo "timeout-security=$(yq eval '.timeouts.security' "$CONFIG_FILE")" >> $GITHUB_OUTPUT
          echo "timeout-quality=$(yq eval '.timeouts.quality' "$CONFIG_FILE")" >> $GITHUB_OUTPUT
          echo "timeout-compatibility=$(yq eval '.timeouts.compatibility' "$CONFIG_FILE")" >> $GITHUB_OUTPUT
          
          # Thresholds
          echo "coverage-threshold=$(yq eval '.thresholds.coverage' "$CONFIG_FILE")" >> $GITHUB_OUTPUT
          
          # Notifications
          echo "slack-channel-ci=$(yq eval '.notifications.slack.channels.ci' "$CONFIG_FILE")" >> $GITHUB_OUTPUT
          echo "slack-channel-releases=$(yq eval '.notifications.slack.channels.releases' "$CONFIG_FILE")" >> $GITHUB_OUTPUT
          echo "slack-bot-token-secret=$(yq eval '.notifications.slack.bot_token_secret' "$CONFIG_FILE")" >> $GITHUB_OUTPUT
          echo "github-app-id-secret=$(yq eval '.notifications.github.app_id_secret' "$CONFIG_FILE")" >> $GITHUB_OUTPUT
          echo "github-private-key-secret=$(yq eval '.notifications.github.private_key_secret' "$CONFIG_FILE")" >> $GITHUB_OUTPUT
          
          # Features
          echo "feature-coverage-upload=$(yq eval '.features.coverage_upload' "$CONFIG_FILE")" >> $GITHUB_OUTPUT
          echo "feature-security-scan=$(yq eval '.features.security_scan' "$CONFIG_FILE")" >> $GITHUB_OUTPUT
          echo "feature-quality-check=$(yq eval '.features.quality_check' "$CONFIG_FILE")" >> $GITHUB_OUTPUT
          echo "feature-slack-notifications=$(yq eval '.features.slack_notifications' "$CONFIG_FILE")" >> $GITHUB_OUTPUT
        else
          echo "⚠️ yq not available, using basic parsing"
          echo "ruby-default=3.3" >> $GITHUB_OUTPUT
          echo "timeout-test=1800" >> $GITHUB_OUTPUT
          echo "timeout-security=600" >> $GITHUB_OUTPUT
          echo "timeout-quality=300" >> $GITHUB_OUTPUT
          echo "timeout-compatibility=900" >> $GITHUB_OUTPUT
          echo "coverage-threshold=80" >> $GITHUB_OUTPUT
          echo "slack-channel-ci=SLACK_CHANNEL_ID" >> $GITHUB_OUTPUT
          echo "slack-channel-releases=SLACK_CHANNEL_ID" >> $GITHUB_OUTPUT
          echo "slack-bot-token-secret=SLACK_BOT_TOKEN" >> $GITHUB_OUTPUT
          echo "github-app-id-secret=DBWATCHER_CI_APP_ID" >> $GITHUB_OUTPUT
          echo "github-private-key-secret=DBWATCHER_CI_PRIVATE_KEY" >> $GITHUB_OUTPUT
          echo "feature-coverage-upload=true" >> $GITHUB_OUTPUT
          echo "feature-security-scan=true" >> $GITHUB_OUTPUT
          echo "feature-quality-check=true" >> $GITHUB_OUTPUT
          echo "feature-slack-notifications=true" >> $GITHUB_OUTPUT
        fi
        
        echo "✅ Configuration loaded successfully"
