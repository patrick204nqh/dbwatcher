name: Auto-merge Dependabot PRs

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: write
  pull-requests: write
  checks: read

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    if: |
      github.event.pull_request.draft == false &&
      (
        github.actor == 'dependabot[bot]' ||
        contains(github.event.pull_request.labels.*.name, 'auto-merge-candidate')
      )

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate dbwatcher-ci App Token
        id: app_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.DBWATCHER_CI_APP_ID }}
          private-key: ${{ secrets.DBWATCHER_CI_PRIVATE_KEY }}

      - name: Check if PR is ready for auto-merge
        id: check
        env:
          PR_LABELS: ${{ toJSON(github.event.pull_request.labels.*.name) }}
          PR_TITLE: ${{ github.event.pull_request.title }}
        run: |
          # Debug info
          echo "PR Labels: $PR_LABELS"
          echo "PR Title: $PR_TITLE"
          
          # Check for safe auto-merge conditions
          if [[ "${{ github.actor }}" == "dependabot[bot]" ]]; then
            # Security updates are always safe
            if echo "$PR_LABELS" | grep -q "security"; then
              echo "safe_update=true" >> $GITHUB_OUTPUT
              echo "reason=security_update" >> $GITHUB_OUTPUT
            # Patch updates (x.y.Z) are safe
            elif echo "$PR_TITLE" | grep -qE "(from [0-9]+\.[0-9]+\.[0-9]+ to [0-9]+\.[0-9]+\.[0-9]+)"; then
              echo "safe_update=true" >> $GITHUB_OUTPUT
              echo "reason=patch_update" >> $GITHUB_OUTPUT
            # Group updates for dependencies are safe (Dependabot already groups compatible updates)
            elif echo "$PR_TITLE" | grep -qE "(group with [0-9]+ updates?)"; then
              echo "safe_update=true" >> $GITHUB_OUTPUT
              echo "reason=group_update" >> $GITHUB_OUTPUT
            # Dev dependencies minor updates are safe
            elif echo "$PR_LABELS" | grep -q "javascript" && echo "$PR_TITLE" | grep -qE "(from [0-9]+\.[0-9]+ to [0-9]+\.[0-9]+)"; then
              echo "safe_update=true" >> $GITHUB_OUTPUT
              echo "reason=dev_minor_update" >> $GITHUB_OUTPUT
            else
              echo "safe_update=false" >> $GITHUB_OUTPUT
              echo "reason=requires_manual_review" >> $GITHUB_OUTPUT
            fi
          # Manual override with label
          elif echo "$PR_LABELS" | grep -q "auto-merge-candidate"; then
            echo "safe_update=true" >> $GITHUB_OUTPUT
            echo "reason=manual_override" >> $GITHUB_OUTPUT
          else
            echo "safe_update=false" >> $GITHUB_OUTPUT
            echo "reason=not_dependabot" >> $GITHUB_OUTPUT
          fi

      - name: Wait for CI checks
        if: steps.check.outputs.safe_update == 'true'
        uses: lewagon/wait-on-check-action@v1.3.4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          check-name: "Test Suite"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 30
          allowed-conclusions: success

      - name: Wait for quality checks
        if: steps.check.outputs.safe_update == 'true'
        uses: lewagon/wait-on-check-action@v1.3.4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          check-name: "Code Quality"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 30
          allowed-conclusions: success

      - name: Wait for security checks
        if: steps.check.outputs.safe_update == 'true'
        uses: lewagon/wait-on-check-action@v1.3.4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          check-name: "Security Scan"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 30
          allowed-conclusions: success

      - name: Wait for compatibility checks
        if: steps.check.outputs.safe_update == 'true'
        uses: lewagon/wait-on-check-action@v1.3.4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          check-name: "Compatibility Check"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 30
          allowed-conclusions: success

      - name: Auto-approve dependabot PRs
        if: steps.check.outputs.safe_update == 'true' && github.actor == 'dependabot[bot]'
        env:
          GITHUB_TOKEN: ${{ steps.app_token.outputs.token }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          APPROVAL_REASON: ${{ steps.check.outputs.reason }}
        run: |
          gh pr review "$PR_NUMBER" --approve --body "Auto-approved safe dependency update ($APPROVAL_REASON)"

      - name: Enable auto-merge
        if: steps.check.outputs.safe_update == 'true'
        env:
          GITHUB_TOKEN: ${{ steps.app_token.outputs.token }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          gh pr merge "$PR_NUMBER" --auto --squash --delete-branch

      - name: Add comment for rejected auto-merge
        if: steps.check.outputs.safe_update == 'false'
        env:
          GITHUB_TOKEN: ${{ steps.app_token.outputs.token }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REASON: ${{ steps.check.outputs.reason }}
        run: |
          case "$REASON" in
            "requires_manual_review")
              MESSAGE="‚ö†Ô∏è Auto-merge skipped: This update requires manual review (likely a major version change)."
              ;;
            "not_dependabot")
              MESSAGE="‚ÑπÔ∏è Auto-merge skipped: Only Dependabot PRs are eligible for auto-merge."
              ;;
            *)
              MESSAGE="‚ÑπÔ∏è Auto-merge skipped: $REASON"
              ;;
          esac

          gh pr comment "$PR_NUMBER" --body "$MESSAGE"

  notify-auto-merge:
    runs-on: ubuntu-latest
    needs: auto-merge
    if: always() && github.actor == 'dependabot[bot]'
    steps:
      - name: Notify Slack about auto-merge
        if: needs.auto-merge.result == 'success'
        uses: slackapi/slack-github-action@v2.0.0
        with:
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          method: chat.postMessage
          payload: |
            {
              "channel": "${{ secrets.SLACK_CHANNEL_ID }}",
              "text": "ü§ñ Auto-merged: ${{ github.event.pull_request.title }}",
              "username": "dbwatcher",
              "icon_emoji": ":mag:",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "ü§ñ *Auto-merged* dependency update"
                  },
                  "accessory": {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "View PR"
                    },
                    "url": "${{ github.event.pull_request.html_url }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "_${{ github.event.pull_request.title }}_"
                  }
                },
                {
                  "type": "context",
                  "elements": [
                    {
                      "type": "mrkdwn",
                      "text": "By ${{ github.actor }} ‚Ä¢ <https://github.com/${{ github.repository }}|${{ github.repository }}>"
                    }
                  ]
                }
              ]
            }
