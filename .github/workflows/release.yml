name: Release Gem

permissions:
  contents: write
  packages: write
  id-token: write

on:
  push:
    tags:
      - v*
  workflow_dispatch:

env:
  DRY_RUN: "false"

jobs:
  setup:
    name: Load Configuration
    runs-on: ubuntu-latest
    outputs:
      ruby-versions: ${{ steps.config.outputs.ruby-versions }}
      ruby-default: ${{ steps.config.outputs.ruby-default }}
      slack-channel-releases: ${{ steps.config.outputs.slack-channel-releases }}
      slack-token-secret: ${{ steps.config.outputs.slack-bot-token-secret }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Load Configuration
        id: config
        uses: ./.github/actions/setup-config

  validate-release:
    runs-on: ubuntu-latest
    name: Validate Release
    needs: setup
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
      should_release: ${{ steps.validate.outputs.should_release }}
      is_dry_run: ${{ steps.set_dry_run.outputs.is_dry_run }}
    steps:
      - name: Set dry run flag
        id: set_dry_run
        run: |
          echo "is_dry_run=${{ env.DRY_RUN }}" >> $GITHUB_OUTPUT

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version from tag or input
        id: extract_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # For workflow_dispatch, use the version from the gemspec
            GEMSPEC_VERSION=$(ruby -e "require './lib/dbwatcher/version'; puts Dbwatcher::VERSION")
            VERSION="$GEMSPEC_VERSION"
            echo "Manual release triggered for version: $VERSION"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "Tag-triggered release for version: $VERSION"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Setup Ruby Environment
        uses: ./.github/actions/setup-ruby
        with:
          ruby-version: ${{ needs.setup.outputs.ruby-default }}

      - name: Validate version format
        id: validate
        run: |
          VERSION="${{ steps.extract_version.outputs.version }}"

          # Check semantic versioning format
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?(\+[a-zA-Z0-9.-]+)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected semantic versioning format: X.Y.Z[-prerelease][+build]"
            exit 1
          fi

          # Verify version consistency with gemspec
          GEMSPEC_VERSION=$(ruby -e "require './lib/dbwatcher/version'; puts Dbwatcher::VERSION")
          echo "Gemspec version: $GEMSPEC_VERSION"
          echo "Release version: $VERSION"

          if [ "$GEMSPEC_VERSION" != "$VERSION" ]; then
            echo "❌ Version mismatch!"
            echo "Gemspec version: $GEMSPEC_VERSION"
            echo "Release version: $VERSION"
            echo "Please update lib/dbwatcher/version.rb to match the release version"
            exit 1
          fi

          # Check if this version already exists on RubyGems
          if gem list dbwatcher --remote --exact | grep -q "($VERSION)"; then
            echo "❌ Version $VERSION already exists on RubyGems"
            exit 1
          fi

          echo "✅ Version validation passed"
          echo "should_release=true" >> $GITHUB_OUTPUT

  test:
    needs: [setup, validate-release]
    runs-on: ubuntu-latest
    name: Test Ruby ${{ matrix.ruby }}
    if: needs.validate-release.outputs.should_release == 'true'
    strategy:
      fail-fast: true
      matrix:
        ruby: ${{ fromJSON(needs.setup.outputs.ruby-versions) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Ruby Environment
        uses: ./.github/actions/setup-ruby
        with:
          ruby-version: ${{ matrix.ruby }}

      - name: Run Tests
        uses: ./.github/actions/run-tests
        with:
          test-suite: "all"
          coverage: "false"
          ruby-version: ${{ matrix.ruby }}

      - name: Run Security Scan
        if: matrix.ruby == needs.setup.outputs.ruby-default
        uses: ./.github/actions/security-scan

      - name: Run Quality Checks
        if: matrix.ruby == needs.setup.outputs.ruby-default
        uses: ./.github/actions/quality-check

  build-and-publish:
    needs: [setup, validate-release, test]
    runs-on: ubuntu-latest
    name: Build and Publish Gem
    if: needs.validate-release.outputs.should_release == 'true'
    environment:
      name: production
      url: https://rubygems.org/gems/dbwatcher

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Ruby Environment
        uses: ./.github/actions/setup-ruby
        with:
          ruby-version: ${{ needs.setup.outputs.ruby-default }}

      - name: Build and Publish Gem
        id: gem_publish
        uses: ./.github/actions/gem-publish
        with:
          version: ${{ needs.validate-release.outputs.version }}
          gem-name: "dbwatcher"
          dry-run: ${{ needs.validate-release.outputs.is_dry_run }}
          rubygems-api-key: ${{ secrets.RUBYGEMS_API_KEY }}

      - name: Create GitHub Release
        if: needs.validate-release.outputs.is_dry_run != 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.validate-release.outputs.version }}
          name: Release ${{ needs.validate-release.outputs.version }}
          body: |
            ## 🚀 DB Watcher v${{ needs.validate-release.outputs.version }}

            ### Installation

            ```bash
            gem install dbwatcher -v ${{ needs.validate-release.outputs.version }}
            ```

            Or add to your Gemfile:

            ```ruby
            gem 'dbwatcher', '~> ${{ needs.validate-release.outputs.version }}'
            ```

            ### Changes

            See [CHANGELOG.md](CHANGELOG.md) for detailed changes in this release.

            ### Links

            - 📦 [RubyGems](https://rubygems.org/gems/dbwatcher/versions/${{ needs.validate-release.outputs.version }})
            - 📚 [Documentation](https://github.com/${{ github.repository }}/blob/v${{ needs.validate-release.outputs.version }}/README.md)
            - 🐛 [Issues](https://github.com/${{ github.repository }}/issues)
          draft: false
          prerelease: false
          files: ${{ steps.gem_publish.outputs.gem-file }}

      - name: Upload gem artifact
        uses: actions/upload-artifact@v4
        with:
          name: dbwatcher-gem-${{ needs.validate-release.outputs.version }}
          path: ${{ steps.gem_publish.outputs.gem-file }}
          retention-days: 90

  post-release:
    needs: [setup, validate-release, build-and-publish]
    runs-on: ubuntu-latest
    name: Post-Release Tasks
    if: needs.validate-release.outputs.should_release == 'true' && needs.validate-release.outputs.is_dry_run != 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Verify publication
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          echo "⏳ Waiting for gem to be available on RubyGems..."

          # Wait up to 5 minutes for the gem to be available
          for i in {1..30}; do
            if gem list dbwatcher --remote --exact | grep -q "($VERSION)"; then
              echo "✅ Gem $VERSION is now available on RubyGems"
              break
            fi
            echo "Waiting... (attempt $i/30)"
            sleep 10
          done

      - name: Notify success
        run: |
          echo "🎉 Release v${{ needs.validate-release.outputs.version }} completed successfully!"
          echo "📦 Gem published to RubyGems"
          echo "🏷️ GitHub release created"
          echo "🔗 https://rubygems.org/gems/dbwatcher/versions/${{ needs.validate-release.outputs.version }}"

      - name: Send Release Notifications
        if: success()
        uses: ./.github/actions/notify-status
        with:
          context: "release"
          status: "success"
          slack-channel: ${{ secrets[needs.setup.outputs.slack-channel-releases] }}
          slack-token: ${{ secrets[needs.setup.outputs.slack-token-secret] }}

  notify-failure:
    needs: [setup, validate-release, build-and-publish, post-release]
    runs-on: ubuntu-latest
    name: Notify on Failure
    if: always() && (failure() || cancelled()) && needs.validate-release.outputs.should_release == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine failed job
        id: failed_job
        run: |
          if [[ "${{ needs.validate-release.result }}" == "failure" ]]; then
            echo "failed_step=Validation" >> $GITHUB_OUTPUT
            echo "failed_reason=Version validation or format check failed" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.build-and-publish.result }}" == "failure" ]]; then
            echo "failed_step=Build & Publish" >> $GITHUB_OUTPUT
            echo "failed_reason=Gem build or RubyGems publishing failed" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.post-release.result }}" == "failure" ]]; then
            echo "failed_step=Post-Release" >> $GITHUB_OUTPUT
            echo "failed_reason=Release verification or notification failed" >> $GITHUB_OUTPUT
          else
            echo "failed_step=Unknown" >> $GITHUB_OUTPUT
            echo "failed_reason=Workflow was cancelled or failed unexpectedly" >> $GITHUB_OUTPUT
          fi

      - name: Send Failure Notifications
        uses: ./.github/actions/notify-status
        with:
          context: "release"
          status: "failure"
          slack-channel: ${{ secrets[needs.setup.outputs.slack-channel-releases] }}
          slack-token: ${{ secrets[needs.setup.outputs.slack-token-secret] }}
