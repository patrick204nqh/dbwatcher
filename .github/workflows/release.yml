name: Release Gem

permissions:
  contents: write
  packages: write
  id-token: write

on:
  push:
    tags:
      - v*
  workflow_dispatch:

env:
  RUBY_VERSION: "3.3"
  DRY_RUN: "false"

jobs:
  validate-release:
    runs-on: ubuntu-latest
    name: Validate Release
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
      should_release: ${{ steps.validate.outputs.should_release }}
      is_dry_run: ${{ steps.set_dry_run.outputs.is_dry_run }}
      ruby_version: ${{ env.RUBY_VERSION }}
    steps:
      - name: Set dry run flag
        id: set_dry_run
        run: |
          echo "is_dry_run=${{ env.DRY_RUN }}" >> $GITHUB_OUTPUT

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version from tag or input
        id: extract_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # For workflow_dispatch, use the version from the gemspec
            GEMSPEC_VERSION=$(ruby -e "require './lib/dbwatcher/version'; puts Dbwatcher::VERSION")
            VERSION="$GEMSPEC_VERSION"
            echo "Manual release triggered for version: $VERSION"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "Tag-triggered release for version: $VERSION"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Validate version format
        id: validate
        run: |
          VERSION="${{ steps.extract_version.outputs.version }}"

          # Check semantic versioning format
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?(\+[a-zA-Z0-9.-]+)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected semantic versioning format: X.Y.Z[-prerelease][+build]"
            exit 1
          fi

          # Verify version consistency with gemspec
          GEMSPEC_VERSION=$(ruby -e "require './lib/dbwatcher/version'; puts Dbwatcher::VERSION")
          echo "Gemspec version: $GEMSPEC_VERSION"
          echo "Release version: $VERSION"

          if [ "$GEMSPEC_VERSION" != "$VERSION" ]; then
            echo "❌ Version mismatch!"
            echo "Gemspec version: $GEMSPEC_VERSION"
            echo "Release version: $VERSION"
            echo "Please update lib/dbwatcher/version.rb to match the release version"
            exit 1
          fi

          # Check if this version already exists on RubyGems
          if gem list dbwatcher --remote --exact | grep -q "($VERSION)"; then
            echo "❌ Version $VERSION already exists on RubyGems"
            exit 1
          fi

          echo "✅ Version validation passed"
          echo "should_release=true" >> $GITHUB_OUTPUT

  test:
    needs: validate-release
    runs-on: ubuntu-latest
    name: Test Ruby ${{ matrix.ruby }}
    if: needs.validate-release.outputs.should_release == 'true'
    strategy:
      fail-fast: true
      matrix:
        ruby: ["3.2", "3.3"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby ${{ matrix.ruby }}
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}
          bundler-cache: true

      - name: Run comprehensive tests
        run: |
          echo "🧪 Running tests for Ruby ${{ matrix.ruby }}"
          bundle exec rake spec

      - name: Run security scan
        if: matrix.ruby == needs.validate-release.outputs.ruby_version
        run: |
          echo "🔒 Running security scan"
          bundle exec brakeman --force --format json --output tmp/brakeman-release.json --exit-on-warn || true

      - name: Run quality checks
        if: matrix.ruby == needs.validate-release.outputs.ruby_version
        run: |
          echo "📊 Running quality checks"
          bundle exec rubocop

  build-and-publish:
    needs: [validate-release, test]
    runs-on: ubuntu-latest
    name: Build and Publish Gem
    if: needs.validate-release.outputs.should_release == 'true'
    environment:
      name: production
      url: https://rubygems.org/gems/dbwatcher

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ needs.validate-release.outputs.ruby_version }}
          bundler-cache: true

      - name: Build gem
        id: build
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          echo "🔨 Building gem version $VERSION"
          gem build dbwatcher.gemspec

          # Verify gem was built
          GEM_FILE="dbwatcher-${VERSION}.gem"
          if [ ! -f "$GEM_FILE" ]; then
            echo "❌ Gem file not found: $GEM_FILE"
            exit 1
          fi

          echo "✅ Gem built successfully: $GEM_FILE"
          echo "gem_file=$GEM_FILE" >> $GITHUB_OUTPUT

      - name: Test gem installation
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          GEM_FILE="dbwatcher-${VERSION}.gem"

          echo "🧪 Testing gem structure and contents"

          # Extract and examine gem contents
          gem unpack "$GEM_FILE"

          # Verify gem structure
          echo "🔍 Verifying gem structure"
          if [ -d "dbwatcher-${VERSION}" ]; then
            echo "✅ Gem extracted successfully"
            ls -la "dbwatcher-${VERSION}/"

            # Test that the main files exist
            if [ -f "dbwatcher-${VERSION}/lib/dbwatcher.rb" ]; then
              echo "✅ Main library file exists"
            else
              echo "❌ Main library file missing"
              exit 1
            fi

            if [ -f "dbwatcher-${VERSION}/lib/dbwatcher/version.rb" ]; then
              echo "✅ Version file exists"
            else
              echo "❌ Version file missing"
              exit 1
            fi

            # Test that the version in the gem matches expected version
            cd "dbwatcher-${VERSION}"
            EXTRACTED_VERSION=$(ruby -e "require './lib/dbwatcher/version'; puts Dbwatcher::VERSION")
            if [ "$EXTRACTED_VERSION" = "$VERSION" ]; then
              echo "✅ Version consistency check passed: $EXTRACTED_VERSION"
            else
              echo "❌ Version mismatch in extracted gem: expected $VERSION, got $EXTRACTED_VERSION"
              exit 1
            fi

            cd ..
            rm -rf "dbwatcher-${VERSION}"
          else
            echo "❌ Failed to extract gem"
            exit 1
          fi

          echo "✅ Gem structure validation completed successfully"

      - name: Dry run check
        if: needs.validate-release.outputs.is_dry_run == 'true'
        run: |
          echo "🏃‍♂️ DRY RUN MODE - Skipping actual publishing"
          echo "Would publish: ${{ steps.build.outputs.gem_file }}"
          exit 0

      - name: Setup RubyGems credentials
        if: needs.validate-release.outputs.is_dry_run != 'true'
        run: |
          mkdir -p ~/.gem
          cat > ~/.gem/credentials << EOF
          ---
          :rubygems_api_key: ${{ secrets.RUBYGEMS_API_KEY }}
          EOF
          chmod 0600 ~/.gem/credentials

      - name: Publish to RubyGems
        if: needs.validate-release.outputs.is_dry_run != 'true'
        id: publish
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          GEM_FILE="${{ steps.build.outputs.gem_file }}"

          echo "🚀 Publishing $GEM_FILE to RubyGems"
          gem push "$GEM_FILE"

          echo "✅ Successfully published dbwatcher $VERSION to RubyGems"
          echo "published=true" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: needs.validate-release.outputs.is_dry_run != 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.validate-release.outputs.version }}
          name: Release ${{ needs.validate-release.outputs.version }}
          body: |
            ## 🚀 DB Watcher v${{ needs.validate-release.outputs.version }}

            ### Installation

            ```bash
            gem install dbwatcher -v ${{ needs.validate-release.outputs.version }}
            ```

            Or add to your Gemfile:

            ```ruby
            gem 'dbwatcher', '~> ${{ needs.validate-release.outputs.version }}'
            ```

            ### Changes

            See [CHANGELOG.md](CHANGELOG.md) for detailed changes in this release.

            ### Links

            - 📦 [RubyGems](https://rubygems.org/gems/dbwatcher/versions/${{ needs.validate-release.outputs.version }})
            - 📚 [Documentation](https://github.com/${{ github.repository }}/blob/v${{ needs.validate-release.outputs.version }}/README.md)
            - 🐛 [Issues](https://github.com/${{ github.repository }}/issues)
          draft: false
          prerelease: false
          files: ${{ steps.build.outputs.gem_file }}

      - name: Upload gem artifact
        uses: actions/upload-artifact@v4
        with:
          name: dbwatcher-gem-${{ needs.validate-release.outputs.version }}
          path: ${{ steps.build.outputs.gem_file }}
          retention-days: 90

  post-release:
    needs: [validate-release, build-and-publish]
    runs-on: ubuntu-latest
    name: Post-Release Tasks
    if: needs.validate-release.outputs.should_release == 'true' && needs.validate-release.outputs.is_dry_run != 'true'
    steps:
      - name: Verify publication
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          echo "⏳ Waiting for gem to be available on RubyGems..."

          # Wait up to 5 minutes for the gem to be available
          for i in {1..30}; do
            if gem list dbwatcher --remote --exact | grep -q "($VERSION)"; then
              echo "✅ Gem $VERSION is now available on RubyGems"
              break
            fi
            echo "Waiting... (attempt $i/30)"
            sleep 10
          done

      - name: Notify success
        run: |
          echo "🎉 Release v${{ needs.validate-release.outputs.version }} completed successfully!"
          echo "📦 Gem published to RubyGems"
          echo "🏷️ GitHub release created"
          echo "🔗 https://rubygems.org/gems/dbwatcher/versions/${{ needs.validate-release.outputs.version }}"

      - name: Notify Slack - Release Complete
        if: success()
        uses: slackapi/slack-github-action@v2.0.0
        with:
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          method: chat.postMessage
          payload: |
            {
              "channel": "${{ secrets.SLACK_CHANNEL_ID }}",
              "text": "🚀 Released v${{ needs.validate-release.outputs.version }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "🚀 **Released v${{ needs.validate-release.outputs.version }}** by ${{ github.actor }} 🎉\n<https://rubygems.org/gems/dbwatcher/versions/${{ needs.validate-release.outputs.version }}|RubyGems> • <https://github.com/${{ github.repository }}/releases/tag/v${{ needs.validate-release.outputs.version }}|Release Notes>"
                  },
                  "accessory": {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "View"
                    },
                    "url": "https://github.com/${{ github.repository }}/releases/tag/v${{ needs.validate-release.outputs.version }}"
                  }
                }
              ]
            }

  notify-failure:
    needs: [validate-release, build-and-publish, post-release]
    runs-on: ubuntu-latest
    name: Notify on Failure
    if: always() && (failure() || cancelled()) && needs.validate-release.outputs.should_release == 'true'
    steps:
      - name: Determine failed job
        id: failed_job
        run: |
          if [[ "${{ needs.validate-release.result }}" == "failure" ]]; then
            echo "failed_step=Validation" >> $GITHUB_OUTPUT
            echo "failed_reason=Version validation or format check failed" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.build-and-publish.result }}" == "failure" ]]; then
            echo "failed_step=Build & Publish" >> $GITHUB_OUTPUT
            echo "failed_reason=Gem build or RubyGems publishing failed" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.post-release.result }}" == "failure" ]]; then
            echo "failed_step=Post-Release" >> $GITHUB_OUTPUT
            echo "failed_reason=Release verification or notification failed" >> $GITHUB_OUTPUT
          else
            echo "failed_step=Unknown" >> $GITHUB_OUTPUT
            echo "failed_reason=Workflow was cancelled or failed unexpectedly" >> $GITHUB_OUTPUT
          fi

      - name: Notify Slack - Release Failure
        uses: slackapi/slack-github-action@v2.0.0
        with:
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          method: chat.postMessage
          payload: |
            {
              "channel": "${{ secrets.SLACK_CHANNEL_ID }}",
              "text": "❌ Release failed v${{ needs.validate-release.outputs.version || 'Unknown' }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "❌ **Release failed** v${{ needs.validate-release.outputs.version || 'Unknown' }} by ${{ github.actor }}\n${{ steps.failed_job.outputs.failed_step }}: ${{ steps.failed_job.outputs.failed_reason }}"
                  },
                  "accessory": {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "View"
                    },
                    "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                }
              ]
            }
