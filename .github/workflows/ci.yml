name: CI

permissions:
  actions: write
  contents: read
  id-token: write

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  RUBY_VERSION: "3.3"
  COVERAGE: true
  CI: true

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby ${{ env.RUBY_VERSION }}
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Set up test database
        run: |
          cd spec/dummy
          bundle install
          bundle exec rails db:drop db:create db:migrate RAILS_ENV=test

      - name: Run RSpec unit tests
        run: bundle exec rake unit

      - name: Run Cucumber acceptance tests
        run: bundle exec rake acceptance

      - name: Upload coverage to Qlty
        if: success() && github.ref == 'refs/heads/master'
        uses: qltysh/qlty-action/coverage@v1
        with:
          token: ${{ secrets.QLTY_COVERAGE_TOKEN }}
          files: coverage/.resultset.json

      - name: Upload coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7

  quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby ${{ env.RUBY_VERSION }}
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Run RuboCop
        run: bundle exec rubocop

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby ${{ env.RUBY_VERSION }}
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Run security checks
        run: bundle exec rake security

  compatibility:
    name: Compatibility Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby ${{ env.RUBY_VERSION }}
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Check gem build
        run: |
          gem build dbwatcher.gemspec
          echo "‚úÖ Gem builds successfully"

      - name: Check gemspec validity
        run: |
          gem specification dbwatcher-*.gem
          echo "‚úÖ Gemspec is valid"

      - name: Verify gem can be loaded in bundle context
        run: |
          bundle exec ruby -e "require 'dbwatcher'; puts '‚úÖ Gem loads successfully in bundle context'"

      - name: Check dependencies compatibility
        run: |
          bundle outdated --strict || echo "üì¶ Some dependencies could be updated"
          echo "‚úÖ Dependencies check completed"

  notify:
    name: Slack Notification
    runs-on: ubuntu-latest
    needs: [test, quality, security, compatibility]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Determine CI status
        id: ci_status
        run: |
          # Check the status of all jobs
          TEST_STATUS="${{ needs.test.result }}"
          SECURITY_STATUS="${{ needs.security.result }}"
          QUALITY_STATUS="${{ needs.quality.result }}"
          COMPATIBILITY_STATUS="${{ needs.compatibility.result }}"

          echo "Test: $TEST_STATUS"
          echo "Security: $SECURITY_STATUS"
          echo "Quality: $QUALITY_STATUS"
          echo "Compatibility: $COMPATIBILITY_STATUS"

          # Determine overall status
          if [[ "$TEST_STATUS" == "success" && "$SECURITY_STATUS" == "success" && "$QUALITY_STATUS" == "success" && "$COMPATIBILITY_STATUS" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "color=good" >> $GITHUB_OUTPUT
            echo "emoji=‚úÖ" >> $GITHUB_OUTPUT
          elif [[ "$TEST_STATUS" == "failure" || "$SECURITY_STATUS" == "failure" || "$QUALITY_STATUS" == "failure" || "$COMPATIBILITY_STATUS" == "failure" ]]; then
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "color=danger" >> $GITHUB_OUTPUT
            echo "emoji=‚ùå" >> $GITHUB_OUTPUT
          else
            echo "status=partial" >> $GITHUB_OUTPUT
            echo "color=warning" >> $GITHUB_OUTPUT
            echo "emoji=‚ö†Ô∏è" >> $GITHUB_OUTPUT
          fi

      - name: Send Slack notification
        if: always()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "${{ steps.ci_status.outputs.emoji }} DBWatcher CI: ${{ steps.ci_status.outputs.status }}",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Repository:*\n<${{ github.server_url }}/${{ github.repository }}|${{ github.repository }}>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch:*\n${{ github.ref_name }}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:*\n<${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Workflow:*\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run>"
                    }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Test:* ${{ needs.test.result == 'success' && '‚úÖ' || '‚ùå' }} ${{ needs.test.result }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Quality:* ${{ needs.quality.result == 'success' && '‚úÖ' || '‚ùå' }} ${{ needs.quality.result }}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Security:* ${{ needs.security.result == 'success' && '‚úÖ' || '‚ùå' }} ${{ needs.security.result }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Compatibility:* ${{ needs.compatibility.result == 'success' && '‚úÖ' || '‚ùå' }} ${{ needs.compatibility.result }}"
                    }
                  ]
                },
                {
                  "type": "context",
                  "elements": [
                    {
                      "type": "mrkdwn",
                      "text": "Triggered by ${{ github.actor }} ‚Ä¢ ${{ github.event_name }} event"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
