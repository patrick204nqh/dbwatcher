name: CI

permissions:
  actions: write
  contents: read
  pull-requests: write
  id-token: write

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  setup:
    name: Load Configuration
    runs-on: ubuntu-latest
    outputs:
      ruby-default: ${{ steps.config.outputs.ruby-default }}
      timeout-test: ${{ steps.config.outputs.timeout-test }}
      timeout-security: ${{ steps.config.outputs.timeout-security }}
      timeout-quality: ${{ steps.config.outputs.timeout-quality }}
      timeout-compatibility: ${{ steps.config.outputs.timeout-compatibility }}
      slack-channel-ci: ${{ steps.config.outputs.slack-channel-ci }}
      slack-token-secret: ${{ steps.config.outputs.slack-bot-token-secret }}
      github-app-id-secret: ${{ steps.config.outputs.github-app-id-secret }}
      github-private-key-secret: ${{ steps.config.outputs.github-private-key-secret }}
      feature-coverage-upload: ${{ steps.config.outputs.feature-coverage-upload }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Load Configuration
        id: config
        uses: ./.github/actions/setup-config

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Ruby Environment
        uses: ./.github/actions/setup-ruby
        with:
          ruby-version: ${{ needs.setup.outputs.ruby-default }}

      - name: Run Tests
        id: tests
        uses: ./.github/actions/run-tests
        with:
          test-suite: 'all'
          coverage: 'true'
          timeout: ${{ needs.setup.outputs.timeout-test }}

      - name: Upload coverage to Qlty
        if: success() && github.ref == 'refs/heads/master' && needs.setup.outputs.feature-coverage-upload == 'true'
        uses: qltysh/qlty-action/coverage@v1
        with:
          token: ${{ secrets.QLTY_COVERAGE_TOKEN }}
          files: coverage/.resultset.json

      - name: Upload coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7

  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Ruby Environment
        uses: ./.github/actions/setup-ruby
        with:
          ruby-version: ${{ needs.setup.outputs.ruby-default }}

      - name: Run Quality Checks
        uses: ./.github/actions/quality-check
        with:
          timeout: ${{ needs.setup.outputs.timeout-quality }}

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Ruby Environment
        uses: ./.github/actions/setup-ruby
        with:
          ruby-version: ${{ needs.setup.outputs.ruby-default }}

      - name: Run Security Scan
        uses: ./.github/actions/security-scan
        with:
          timeout: ${{ needs.setup.outputs.timeout-security }}

  compatibility:
    name: Compatibility Check
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Ruby Environment
        uses: ./.github/actions/setup-ruby
        with:
          ruby-version: ${{ needs.setup.outputs.ruby-default }}

      - name: Check gem build
        timeout-minutes: 15
        run: |
          gem build dbwatcher.gemspec
          echo "âœ… Gem builds successfully"

      - name: Check gemspec validity
        run: |
          gem specification dbwatcher-*.gem
          echo "âœ… Gemspec is valid"

      - name: Verify gem can be loaded in bundle context
        run: |
          bundle exec ruby -e "require 'dbwatcher'; puts 'âœ… Gem loads successfully in bundle context'"

      - name: Check dependencies compatibility
        run: |
          bundle outdated --strict || echo "ðŸ“¦ Some dependencies could be updated"
          echo "âœ… Dependencies check completed"

  notify:
    name: CI Notification
    runs-on: ubuntu-latest
    needs: [setup, test, quality, security, compatibility]
    if: always()
    steps:
      - name: Checkout repository
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v4

      - name: Generate dbwatcher-ci App Token
        if: github.event_name == 'pull_request'
        id: app_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets[needs.setup.outputs.github-app-id-secret] }}
          private-key: ${{ secrets[needs.setup.outputs.github-private-key-secret] }}

      - name: Determine CI status
        id: ci_status
        run: |
          # Check the status of all jobs
          TEST_STATUS="${{ needs.test.result }}"
          SECURITY_STATUS="${{ needs.security.result }}"
          QUALITY_STATUS="${{ needs.quality.result }}"
          COMPATIBILITY_STATUS="${{ needs.compatibility.result }}"

          # Determine overall status
          if [[ "$TEST_STATUS" == "success" && "$SECURITY_STATUS" == "success" && "$QUALITY_STATUS" == "success" && "$COMPATIBILITY_STATUS" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
          elif [[ "$TEST_STATUS" == "failure" || "$SECURITY_STATUS" == "failure" || "$QUALITY_STATUS" == "failure" || "$COMPATIBILITY_STATUS" == "failure" ]]; then
            echo "status=failure" >> $GITHUB_OUTPUT
          else
            echo "status=partial" >> $GITHUB_OUTPUT
          fi

      - name: Send Notifications
        uses: ./.github/actions/notify-status
        with:
          context: 'ci'
          status: ${{ steps.ci_status.outputs.status }}
          slack-channel: ${{ secrets[needs.setup.outputs.slack-channel-ci] }}
          slack-token-secret: ${{ needs.setup.outputs.slack-token-secret }}
          pr-number: ${{ github.event.pull_request.number }}
          github-token: ${{ steps.app_token.outputs.token }}
          test-result: ${{ needs.test.result }}
          security-result: ${{ needs.security.result }}
          quality-result: ${{ needs.quality.result }}
          compatibility-result: ${{ needs.compatibility.result }}
