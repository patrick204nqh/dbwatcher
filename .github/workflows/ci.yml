name: CI

permissions:
  actions: write
  contents: read
  id-token: write

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  RUBY_VERSION: "3.3"
  COVERAGE: true
  CI: true

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby ${{ env.RUBY_VERSION }}
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Set up test database
        run: |
          cd spec/dummy
          bundle install
          bundle exec rails db:drop db:create db:migrate RAILS_ENV=test

      - name: Run RSpec unit tests
        run: bundle exec rake unit

      - name: Run Cucumber acceptance tests
        run: bundle exec rake acceptance

      - name: Upload coverage to Qlty
        if: success() && github.ref == 'refs/heads/master'
        uses: qltysh/qlty-action/coverage@v1
        with:
          token: ${{ secrets.QLTY_COVERAGE_TOKEN }}
          files: coverage/.resultset.json

      - name: Upload coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7

  quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby ${{ env.RUBY_VERSION }}
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Run RuboCop
        run: bundle exec rubocop

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby ${{ env.RUBY_VERSION }}
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Run security checks
        run: bundle exec rake security

  compatibility:
    name: Compatibility Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby ${{ env.RUBY_VERSION }}
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Check gem build
        run: |
          gem build dbwatcher.gemspec
          echo "✅ Gem builds successfully"

      - name: Check gemspec validity
        run: |
          gem specification dbwatcher-*.gem
          echo "✅ Gemspec is valid"

      - name: Verify gem can be loaded in bundle context
        run: |
          bundle exec ruby -e "require 'dbwatcher'; puts '✅ Gem loads successfully in bundle context'"

      - name: Check dependencies compatibility
        run: |
          bundle outdated --strict || echo "📦 Some dependencies could be updated"
          echo "✅ Dependencies check completed"

  notify:
    name: Slack Notification
    runs-on: ubuntu-latest
    needs: [test, quality, security, compatibility]
    if: always()
    steps:
      - name: Determine CI status
        id: ci_status
        run: |
          # Check the status of all jobs
          TEST_STATUS="${{ needs.test.result }}"
          SECURITY_STATUS="${{ needs.security.result }}"
          QUALITY_STATUS="${{ needs.quality.result }}"
          COMPATIBILITY_STATUS="${{ needs.compatibility.result }}"

          # Determine overall status
          if [[ "$TEST_STATUS" == "success" && "$SECURITY_STATUS" == "success" && "$QUALITY_STATUS" == "success" && "$COMPATIBILITY_STATUS" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "color=good" >> $GITHUB_OUTPUT
            echo "emoji=✅" >> $GITHUB_OUTPUT
          elif [[ "$TEST_STATUS" == "failure" || "$SECURITY_STATUS" == "failure" || "$QUALITY_STATUS" == "failure" || "$COMPATIBILITY_STATUS" == "failure" ]]; then
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "color=danger" >> $GITHUB_OUTPUT
            echo "emoji=❌" >> $GITHUB_OUTPUT
          else
            echo "status=partial" >> $GITHUB_OUTPUT
            echo "color=warning" >> $GITHUB_OUTPUT
            echo "emoji=⚠️" >> $GITHUB_OUTPUT
          fi

      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "channel": "#cicd-notifications",
              "username": "DB Watcher CI",
              "icon_emoji": ":gear:",
              "attachments": [{
                "color": "${{ steps.ci_status.outputs.color }}",
                "fallback": "DB Watcher CI: ${{ steps.ci_status.outputs.status }}",
                "title": "${{ steps.ci_status.outputs.emoji }} DB Watcher CI: ${{ steps.ci_status.outputs.status }}",
                "title_link": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                "text": "CI workflow completed for branch `${{ github.ref_name }}`",
                "fields": [
                  {
                    "title": "📂 Repository",
                    "value": "<https://github.com/${{ github.repository }}|${{ github.repository }}>",
                    "short": true
                  },
                  {
                    "title": "🌿 Branch",
                    "value": "`${{ github.ref_name }}`",
                    "short": true
                  },
                  {
                    "title": "⚡ Trigger",
                    "value": "${{ github.event_name }}",
                    "short": true
                  },
                  {
                    "title": "📊 Overall Status",
                    "value": "${{ steps.ci_status.outputs.status }}",
                    "short": true
                  },
                  {
                    "title": "🧪 Tests",
                    "value": "${{ needs.test.result == 'success' && '✅' || '❌' }} ${{ needs.test.result }}",
                    "short": true
                  },
                  {
                    "title": "🔍 Code Quality",
                    "value": "${{ needs.quality.result == 'success' && '✅' || '❌' }} ${{ needs.quality.result }}",
                    "short": true
                  },
                  {
                    "title": "🔒 Security Scan",
                    "value": "${{ needs.security.result == 'success' && '✅' || '❌' }} ${{ needs.security.result }}",
                    "short": true
                  },
                  {
                    "title": "🔗 Compatibility",
                    "value": "${{ needs.compatibility.result == 'success' && '✅' || '❌' }} ${{ needs.compatibility.result }}",
                    "short": true
                  },
                  {
                    "title": "👤 Triggered By",
                    "value": "${{ github.actor }}",
                    "short": true
                  },
                  {
                    "title": "🔗 Actions",
                    "value": "<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>",
                    "short": true
                  }
                ],
                "footer": "DB Watcher CI • Powered by GitHub Actions",
                "footer_icon": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
                "ts": "${{ github.event.head_commit.timestamp || github.event.pull_request.updated_at }}"
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
